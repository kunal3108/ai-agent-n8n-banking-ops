{
  "name": "bank_operations_workflow",
  "nodes": [
    {
      "parameters": {
        "options": {
          "allowFileUploads": true,
          "allowedFilesMimeTypes": "*"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -4752,
        3248
      ],
      "id": "923c9eda-79b2-4f49-9cba-2a36d6a2a116",
      "name": "When chat message received",
      "webhookId": "9e9eb0f6-8a99-4505-837b-4cc225abd73b"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a precise assistant. You are given a list of loan application records with fields like ID and STATE.\n\nFilter all applications where STATE is \"ASSAM\". Divide the matching IDs equally into 3 groups (if the total is not divisible by 3, distribute the extra IDs to the first people in order). Assign the groups to:\n\n- Kunal  \n- Samar  \n- Meshan\n\nYour response must follow this exact format — no extra explanation or text:\n\nplease login the following loan applications as mentioned below:\n\nKunal:\n<list of IDs>\n\nSamar:\n<list of IDs>\n\nMeshan:\n<list of IDs>\n\nOnly include the ID field under each name. If there are no matches for STATE = \"ASSAM\", respond with:  \n**No loan applications for today.**\n\nDo not include anything else in your response.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3664,
        3088
      ],
      "id": "19277790-eed2-403a-b37b-043270fcf9ff",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3664,
        3264
      ],
      "id": "373be8a6-597c-41f1-a576-6175fab86242",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "QqcZnWxW7zngyjo1",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.text}}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a reliable assistant managing loan application task allocation between three team members: Samar, Meshan, and Kunal.\n\nYou will receive a message from the user indicating who is absent today. Based on that, reply **exactly** according to the rules below. Do not add any extra text, apologies, or commentary. Maintain the tone and format shown in the examples.\n\nFollow these response rules strictly:\n\n1. If **one person** is absent:\n   Respond with:\n   'Since [AbsentPerson] is absent, please divide loan applications in his tally amongst [RemainingPerson1] and [RemainingPerson2]'\n\n2. If **two people** are absent:\n   Respond with:\n   'Since [AbsentPerson1] and [AbsentPerson2] are absent, [RemainingPerson] please add loan applications in their tally too'\n\n3. If **all three** are absent:\n   Respond with:\n   'Please take up the loan applications in the next working day'\n\n4. If **no one is absent** or the message doesn’t mention any of Samar, Meshan, or Kunal:\n   Respond with:\n   'All are available. Please proceed with normal task distribution.'\n\nUse only the above formats. Never hallucinate names or actions. Never change the sentence structure.\n\n---\n\n### 🔁 Examples:\n\n**User:** Samar is absent  \n**Assistant:** Since Samar is absent, please divide loan applications in his tally amongst Meshan and Kunal\n\n**User:** Samar and Meshan are absent  \n**Assistant:** Since Samar and Meshan are absent, Kunal please add loan applications in their tally too\n\n**User:** All are absent  \n**Assistant:** Please take up the loan applications in the next working day\n\n**User:** Everyone is present  \n**Assistant:** All are available. Please proceed with normal task distribution.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3664,
        3472
      ],
      "id": "83cf768e-5966-4a52-9737-ecb9f207c878",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3664,
        3648
      ],
      "id": "b691adc3-b6a6-4e30-a606-203a66f535e6",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "QqcZnWxW7zngyjo1",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  return {\n    json: {\n      text: item.json.chatInput\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4128,
        3472
      ],
      "id": "de9aa5e5-deac-4f4e-8d22-478a57cc037f",
      "name": "Code1"
    },
    {
      "parameters": {
        "content": "# Prompt for work allocation to a team of 3\n\nYou are a precise assistant. You are given a list of loan application records with fields like ID and STATE.\n\nFilter all applications where STATE is \"ASSAM\". Divide the matching IDs equally into 3 groups \n(if the total is not divisible by 3, distribute the extra IDs to the first people in order). Assign the groups to:\n\n- Kunal  \n- Samar  \n- Meshan\n\nYour response must follow this exact format — no extra explanation or text:\n\n\n\nDo not include anything else in your response.\n\n\n## Output\n\nExample: \n\nplease login the following loan applications as mentioned below:\nKunal:\nID: app_5gMihYDsKutjMV\nID: app_5hKRNHrgHo6Q98\nID: app_5kNNhO0IimhXTR\n\nSamar:\nID: app_5udYxD5eK08cNY\nID: app_5ufJvyIeZM2vWF\nID: app_5ugJtRvaLIxoJM\n\nMeshan:\nID: app_5udjKo5560xJZe\nID: app_5ugqOlZpxIh9dN\nID: app_5vYb85CKVgg5QD\n",
        "height": 396,
        "width": 756,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2816,
        3008
      ],
      "id": "ed365b78-41e8-47e3-9bd8-bb6f1af2039f",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Prompt to handle absence of employee\n\nYou are a reliable assistant managing loan application task allocation between three team members: Samar, Meshan, and Kunal.\n\nYou will receive a message from the user indicating who is absent today. Based on that, reply **exactly** according to the rules below. Do not add any extra text, apologies, or commentary. Maintain the tone and format shown in the examples.\n\nFollow these response rules strictly:\n\n1. If **one person** is absent:\n   Respond with:\n   'Since [AbsentPerson] is absent, please divide loan applications in his tally amongst [RemainingPerson1] and [RemainingPerson2]'\n\n",
        "height": 396,
        "width": 756,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2816,
        3440
      ],
      "id": "19ce09bb-dea8-44f6-88ac-8a503831e980",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "trigger": [
          "message",
          "file_shared",
          "file_created"
        ]
      },
      "type": "@mbakgun/n8n-nodes-slack-socket-mode.slackSocketTrigger",
      "typeVersion": 1,
      "position": [
        -4752,
        2736
      ],
      "id": "32a5263b-f54a-4833-ace9-83b05133076c",
      "name": "Slack Socket Mode Trigger",
      "credentials": {
        "slackSocketCredentialsApi": {
          "id": "wYbdqD25ghHyiD13",
          "name": "Slack Socket Mode Credentials account 2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3584,
        1952
      ],
      "id": "cc396fab-06cc-4f8e-973d-e0e222bec2df",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "QqcZnWxW7zngyjo1",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const fileInfo = items[0].json.event?.files?.[0];\n\nreturn [\n  {\n    json: {\n      file_id: fileInfo?.id || null,\n      fileName: fileInfo?.name || null,\n      fileType: fileInfo?.filetype || null,\n      fileSize: fileInfo?.size || null,\n      downloadUrl: fileInfo?.url_private_download || null,\n      slackPermalink: fileInfo?.permalink || null,\n      botToken: items[0].json.context?.botToken || null\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4416,
        1776
      ],
      "id": "53118616-6619-46bf-9fbb-46f6de04fba0",
      "name": "Send FIle"
    },
    {
      "parameters": {
        "content": "",
        "height": 3900,
        "width": 5436,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5408,
        592
      ],
      "id": "e490a089-b56c-4811-b03f-3cd5294bee66",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.text}}",
        "options": {
          "systemMessage": "You will be given a list of loan applications that are pending disbursement. Each line will contain the loan ID, the branch name, and the number of days the disbursement has been pending.\n\nFrom this list, extract:\n1. The total number of pending disbursement applications (x)\n2. The minimum pending disbursement aging (y)\n3. The maximum pending disbursement aging (z)\n4. The average pending disbursement aging (u), rounded to the nearest whole number\n5. Loan ID with the highest aging (w)\nThen format the output exactly like this Slack message:\n\nThere are {x} loan applications which are pending disbursement. Here are the aging details:\n1. Minimum aging of a loan application is {y} days \n2. Maximum aging of a loan application is {z} days \n3. Average aging at present for all loan applications is {u} days\n4. Loan application id (w) has the highest aging and should be prioritised\n\nDo not include anything else in your reply. Do not rephrase or explain.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3584,
        1776
      ],
      "id": "980e6b37-ddf7-4257-8ab4-e8a76d4523f5",
      "name": "AI Agent 007"
    },
    {
      "parameters": {
        "url": "={{ $json.downloadUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4208,
        1776
      ],
      "id": "4672495d-265c-473c-b95d-bc1776997773",
      "name": "HTTP Request Download File"
    },
    {
      "parameters": {
        "jsCode": "const rows = items.map(item => item.json);\n\n// Filter rows with Application Status = \"Pending Disbursement\"\nconst pending = rows.filter(row => row[\"Application Status\"] === \"Pending Disbursement\");\n\n// Sort descending by Pending Disbursement Aging\npending.sort((a, b) => parseFloat(b[\"Pending Disbursement Aging\"]) - parseFloat(a[\"Pending Disbursement Aging\"]));\n\n// Format all pending cases\nconst prioritizedList = pending.map(row => {\n  return `🔺 ID: ${row[\"ID\"]} | Branch: ${row[\"BRANCH NAME\"]} | Pending Aging: ${row[\"Pending Disbursement Aging\"]} days`;\n});\n\nreturn [{\n  json: {\n    text: prioritizedList.join(\"\\n\")\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3808,
        1776
      ],
      "id": "7ea6191b-d5de-499f-8d0e-74ccfbf7a894",
      "name": "Input Optimisation"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "text": "={{ $json.output }}",
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $json.event_ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -3040,
        2720
      ],
      "id": "483b84dd-fcf2-4b2d-8bbd-d4463f9cef9f",
      "name": "Slack Message - Summary",
      "webhookId": "e3bd8941-2f65-444c-950e-5e9ba11df95a",
      "credentials": {
        "slackApi": {
          "id": "PWg6VNuDi76q2F6G",
          "name": "Slack account 9"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.event.files[0].name }}",
                    "rightValue": "synthetic_loan_data.xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "74fbef8a-94aa-418d-99d8-b79a9efd6228"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fbb9fdfa-4aea-40da-9fa3-393ba686face",
                    "leftValue": "={{ $json.files[0].fileName }}",
                    "rightValue": "combined_los_dump_file.xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1af92c07-b906-4084-98e8-2b0770586fb0",
                    "leftValue": "=$json.event.text",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4640,
        1792
      ],
      "id": "ece72338-0483-4e07-9b66-0f95b52c12cb",
      "name": "Switch: Check For Correct File"
    },
    {
      "parameters": {
        "content": "# Prompts/Info",
        "height": 100,
        "width": 2268,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2816,
        3872
      ],
      "id": "c6cd7eba-81ab-4ad4-b561-6be5ff8d68b3",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "# Workflow",
        "height": 100,
        "width": 1788,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4992,
        3872
      ],
      "id": "98f157b9-b15f-41d0-8c1f-d7420f677a20",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -4000,
        1776
      ],
      "id": "e2f1ba48-22b3-47f7-be4e-69bcde8cbcfc",
      "name": "Extract downloaded data"
    },
    {
      "parameters": {
        "content": "",
        "height": 2148,
        "width": 412,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4992,
        1680
      ],
      "id": "4ed63a49-9df4-4b16-9e5c-5efb40c87660",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "authentication": "bearerAuth"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "5a15d1a0-f6d3-4039-a908-62ced0a3cafe",
      "name": "MCP Client"
    },
    {
      "parameters": {
        "content": "",
        "height": 480,
        "width": 1360
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4560,
        1680
      ],
      "typeVersion": 1,
      "id": "c564f16e-21c4-4e20-982f-fb38bf0d5392",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "content": "",
        "height": 400,
        "width": 1360,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4560,
        2192
      ],
      "typeVersion": 1,
      "id": "97250ac3-cde8-44ed-99a6-a25af5c0661c",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "content": "",
        "height": 352,
        "width": 1360,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4560,
        2624
      ],
      "typeVersion": 1,
      "id": "09678a00-3324-46d9-8aa2-ea536bf69585",
      "name": "Sticky Note26"
    },
    {
      "parameters": {
        "jsCode": "const eventTs = items[0].json.body?.event?.event_ts || null;\n\nreturn [\n  {\n    json: {\n      event_ts: eventTs,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4048,
        2736
      ],
      "id": "10fe4ef0-f1c5-488a-8a4a-15614b483138",
      "name": "Pick Timestamp"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3296,
        2720
      ],
      "id": "7d057a50-e94d-4eaa-8bf6-06a3cc0f2f00",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/threads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.body.event.text }}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4432,
        2304
      ],
      "id": "4a14f2a8-4492-4f16-b668-9b1068966df0",
      "name": "HTTP Request",
      "credentials": {
        "openAiApi": {
          "id": "QqcZnWxW7zngyjo1",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{$json.id}}/runs",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Authorization\": \"Bearer Your-App-Token\",\n  \"OpenAI-Beta\": \"assistants=v2\",\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"assistant_id\": \"yourassistant id\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4208,
        2304
      ],
      "id": "0d288b22-5d1b-40aa-a309-e9e50cd63fa3",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{$json.thread_id}}/runs/{{$json.id}}",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Authorization\": \"Bearer sYour-App-Token\",\n  \"OpenAI-Beta\": \"assistants=v2\",\n  \"Content-Type\": \"application/json\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3856,
        2304
      ],
      "id": "14f86d2f-db50-41da-80a5-450c91edaf3a",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $json.thread_id }}/messages\n",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Authorization\": \"Bearer Your-App-Token\",\n  \"OpenAI-Beta\": \"assistants=v2\",\n  \"Content-Type\": \"application/json\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3632,
        2304
      ],
      "id": "bcabb5b0-41f1-4d4a-8fa0-9bc9619bc0e6",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "const fullText = $json.data[0].content[0].text.value;\n\n// Remove anything that looks like 【...†...】 including the symbols\nconst cleanedText = fullText.replace(/【.*?†.*?】/g, '').trim();\n\nreturn [{\n  json: {\n    output: cleanedText\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3408,
        2304
      ],
      "id": "b7fc30e3-0c6b-45f2-8616-d67efb1d54c0",
      "name": "Code4"
    },
    {
      "parameters": {
        "amount": 7
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -4032,
        2304
      ],
      "id": "f69ee856-d02c-4090-bcb6-65a088ccc743",
      "name": "Wait",
      "webhookId": "3c34b707-5846-4613-8fa6-4f8148fcb2c4"
    },
    {
      "parameters": {
        "content": "",
        "height": 848,
        "width": 1360,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4560,
        2992
      ],
      "typeVersion": 1,
      "id": "327fd714-1d01-4b1a-8cac-36831e4b44e1",
      "name": "Sticky Note27"
    },
    {
      "parameters": {
        "content": "# RAG implementation using OpenAI Vector Store\n\n## Storage: OpenAI Vector Store\n\n## System Instructions\nYou are a data assistant specialized in answering questions about pending loan disbursement summaries. You have access to a vector store of JSON records. Each record contains a summary of loan applications that were pending disbursement on a specific date.\n\nEach summary includes:\n- The total number of pending loan applications\n- Minimum aging in days\n",
        "height": 352,
        "width": 752,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2816,
        2208
      ],
      "typeVersion": 1,
      "id": "8968701e-78e5-4de1-869c-f205010099ae",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "content": "# Prompt for Data Summary\n\nYou will be given a list of loan applications that are pending disbursement. Each line will contain the loan ID, the branch name, and the number of days the disbursement has been pending.\n\nFrom this list, extract:\n1. The total number of pending disbursement applications (x)\n2. The minimum pending disbursement aging (y)\n3. The maximum pending disbursement aging (z)\n4. The average pending disbursement aging (u), rounded to the nearest whole number\n\nThen format the output exactly like this Slack message:\n\nThere are {x} loan applications which are pending disbursement with a minimum aging of {y} days and a maximum aging of {z} days with an average aging of {u} days\n\nDo not include anything else in your reply. Do not rephrase or explain.\n\n",
        "height": 480,
        "width": 756,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2816,
        1680
      ],
      "id": "0eda7112-33c1-46b5-9a70-07338b15711c",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Output\n\nThere are 10 loan applications which are pending disbursement. Here are the aging details:\n1. Minimum aging of a loan application is 18 days\n2. Maximum aging of a loan application is 35 days\n3. Average aging at present for all loan applications is 27 days\n4. Loan application id APP100781 has the highest aging and should be prioritised",
        "height": 480,
        "width": 372,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2032,
        1680
      ],
      "id": "245a3c96-6422-4f2c-8347-de4dc8c273c2",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "",
        "height": 484,
        "width": 652,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1648,
        1680
      ],
      "id": "76641160-e603-459d-8bf2-9c0afe9303ae",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "content": "please login the following loan applications as mentioned below:\n\nKunal:\n<list of IDs>\n\nSamar:\n<list of IDs>\n\nMeshan:\n<list of IDs>\n\nOnly include the ID field under each name. If there are no matches for STATE = ASSAM, respond with:  \n**No loan applications for ASSAM.**\n\nDo not include anything else in your response.\n\n\n\n",
        "height": 396,
        "width": 372,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2032,
        3008
      ],
      "id": "a21bda24-562e-4a71-86e1-009dfa30322c",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "content": "## Output\n\nExample: \n\nplease login the following loan applications as mentioned below:\nKunal:\nID: app_5gMihYDsKutjMV\nID: app_5hKRNHrgHo6Q98\nID: app_5kNNhO0IimhXTR\n\nSamar:\nID: app_5udYxD5eK08cNY\nID: app_5ufJvyIeZM2vWF\nID: app_5ugJtRvaLIxoJM\n\n",
        "height": 396,
        "width": 388,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1648,
        3008
      ],
      "id": "ee4b6db2-48b1-47d7-84fd-bd855f06c12e",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "content": "Meshan:\nID: app_5udjKo5560xJZe\nID: app_5ugqOlZpxIh9dN\nID: app_5vYb85CKVgg5QD\n\n\n",
        "height": 396,
        "width": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1248,
        3008
      ],
      "id": "0b5bb248-0b9b-4578-bf69-57990c51b70c",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "content": "\n- Maximum aging in days\n- Average aging in days\n- The application ID with the highest aging\n\nYour responsibilities:\n- Answer questions only based on the summaries present in the vector store.\n- Perform basic calculations across summaries when asked (e.g. averages, max/min across dates).\n- Respond accurately to date-specific queries (e.g. aging on 2025-07-20).\n- If a query is beyond the scope of the data (e.g. future projections, disbursement reasons, or unrelated topics), **say: \"No comments.\"** Do not attempt to guess or fill gaps.\n\n",
        "height": 352,
        "width": 368,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2032,
        2208
      ],
      "typeVersion": 1,
      "id": "4f5b2bb1-275c-42f5-8020-2153f48dc4bd",
      "name": "Sticky Note28"
    },
    {
      "parameters": {
        "content": "\n- If the information requested is missing for a specific date or range, say: **“The information is not available in the current summaries.”**\n\nExamples of supported questions:\n- “What is the average aging from July 18 to July 22?”\n- “Which application had the highest aging on 2025-07-21?”\n- “What is the trend in number of pending applications over 5 days?”\n\nIf the user mentions a date like \"23rd June\", assume it's \"2025-06-23\" unless another year is mentioned. Match summaries across both full and natural date formats.\n",
        "height": 352,
        "width": 384,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1664,
        2208
      ],
      "typeVersion": 1,
      "id": "df49ee79-b567-4bfe-a5a9-fdb96fcd2949",
      "name": "Sticky Note29"
    },
    {
      "parameters": {
        "content": "Examples of **unsupported questions** (respond with “No comments”):\n- “Why is aging increasing?”\n- “What is expected aging next week?”\n- “What should be done to improve disbursement?”\n\n💡 Always think step by step before responding, and cite the exact dates or application IDs mentioned when relevant.\n\nLet’s begin.\n",
        "height": 352,
        "width": 256,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1264,
        2208
      ],
      "typeVersion": 1,
      "id": "64cb7f77-5723-4ce3-96dc-752011d3e319",
      "name": "Sticky Note30"
    },
    {
      "parameters": {
        "content": "### Examples:\n\n**User:** Samar is absent  \n**Assistant:** Since Samar is absent, please divide loan applications in his tally amongst Meshan and Kunal\n\n**User:** Samar and Meshan are absent  \n**Assistant:** Since Samar and Meshan are absent, Kunal please add loan applications in their tally too\n\n**User:** All are absent  \n**Assistant:** Please take up the loan applications in the next working day\n\n**User:** Everyone is present  \n**Assistant:** All are available. Please proceed with normal task distribution.\n\n",
        "height": 412,
        "width": 372,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1632,
        3440
      ],
      "id": "c0e80f5b-e695-48ea-94c1-5588d6e50f1c",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "content": "2. If **two people** are absent:\n   Respond with:\n   'Since [AbsentPerson1] and [AbsentPerson2] are absent, [RemainingPerson] please add loan applications in their tally too'\n\n3. If **all three** are absent:\n   Respond with:\n   'Please take up the loan applications in the next working day'\n\n4. If **no one is absent** or the message doesn’t mention any of Samar, Meshan, or Kunal:\n   Respond with:\n   'All are available. Please proceed with normal task distribution.'\n\nUse only the above formats. Never hallucinate names or actions. Never change the sentence structure.\n",
        "height": 404,
        "width": 380,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2032,
        3440
      ],
      "id": "7006327d-efb0-41a8-a715-1cf4d817b87c",
      "name": "Sticky Note31"
    },
    {
      "parameters": {
        "content": "",
        "height": 2292,
        "width": 348,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3184,
        1680
      ],
      "id": "b604a5c8-419b-49cf-a4b4-722d2355448f",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -4128,
        3088
      ],
      "id": "aba8ead1-a007-4b89-8546-70c2780207ae",
      "name": "Extract downloaded data1"
    },
    {
      "parameters": {
        "jsCode": "const filtered = items\n  .filter(item => (item.json.STATE || \"\").toUpperCase() === \"ASSAM\")\n  .map(item => ({\n    ID: item.json.ID,\n    STATE: item.json.STATE\n  }));\n\nreturn [{\n  json: {\n    text: JSON.stringify(filtered)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3936,
        3088
      ],
      "id": "4a26bfeb-42c6-45a5-b287-ee5721a8fa0f",
      "name": "Input Optimisation1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fbb9fdfa-4aea-40da-9fa3-393ba686face",
                    "leftValue": "={{ $json.files[0].fileName }}",
                    "rightValue": "combined_los_data.xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1af92c07-b906-4084-98e8-2b0770586fb0",
                    "leftValue": "=$json.event.text",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4592,
        3248
      ],
      "id": "0a9df0dd-c840-496a-a838-c2c197b4baa7",
      "name": "Switch: Check For Correct File1"
    },
    {
      "parameters": {
        "content": "## Output\n\nExample: \n\nSince Samar is absent, please divide loan applications in his tally amongst Meshan and Kunal",
        "height": 412,
        "width": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1248,
        3440
      ],
      "id": "cec8ce3d-2b5e-4046-9d7b-f55f7f40faa7",
      "name": "Sticky Note32"
    },
    {
      "parameters": {
        "content": "",
        "height": 2164,
        "width": 412,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -960,
        1680
      ],
      "id": "2b2deea2-fde5-47d0-a97f-b91d1dd9bb64",
      "name": "Sticky Note34"
    },
    {
      "parameters": {
        "content": "# Platform\n## n8n \n\n# APIs\n## 1. OPEN AI (AI Agents)\n## 2. OPEN AI ASSISTANT/VECTOR STORE (RAG)\n## 3. SLACK API (Communication)\n\n",
        "height": 352,
        "width": 1824,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2816,
        2624
      ],
      "typeVersion": 1,
      "id": "ff677b63-01fe-4944-9e04-8eeb69c824af",
      "name": "Sticky Note35"
    },
    {
      "parameters": {
        "content": "# n8n workflow to \n\n## 1. Summarize data published over slack\n## 2. Allocate tasks to team members and \n## 3. Retrieve summary from legacy data \n\n\n\n",
        "height": 288,
        "width": 3120,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3664,
        1376
      ],
      "typeVersion": 1,
      "id": "009b838d-7da2-4183-8c8b-d682f62b37cd",
      "name": "Sticky Note36"
    },
    {
      "parameters": {
        "content": "## AI Agents\n## RAG/Semantic Vector-Based Retrieval \n## n8n\n## Slack",
        "height": 288,
        "width": 1312,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4992,
        1376
      ],
      "typeVersion": 1,
      "id": "ff7f8265-8512-40c0-a96e-c5b4d926d954",
      "name": "Sticky Note37"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Switch: Check For Correct File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Slack Message - Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Slack Message - Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Socket Mode Trigger": {
      "main": [
        [
          {
            "node": "Switch: Check For Correct File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pick Timestamp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent 007",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send FIle": {
      "main": [
        [
          {
            "node": "HTTP Request Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent 007": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Download File": {
      "main": [
        [
          {
            "node": "Extract downloaded data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Optimisation": {
      "main": [
        [
          {
            "node": "AI Agent 007",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch: Check For Correct File": {
      "main": [
        [
          {
            "node": "Send FIle",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract downloaded data": {
      "main": [
        [
          {
            "node": "Input Optimisation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Timestamp": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Slack Message - Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract downloaded data1": {
      "main": [
        [
          {
            "node": "Input Optimisation1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Optimisation1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch: Check For Correct File1": {
      "main": [
        [
          {
            "node": "Extract downloaded data1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0e198f0d-d0fa-423b-8092-77d0b2659db4",
  "meta": {
    "instanceId": "08debe0a6c6be745fb86d420206902749831ecde5da52fba3ad5c69f8872fe95"
  },
  "id": "iWXIP9ujTmm1hGbY",
  "tags": []
}
